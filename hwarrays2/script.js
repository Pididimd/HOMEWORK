// todo: Дан случайный массив чисел (создайте самостоятельно). С помощью метода .filter() отфильтруйте массив так, чтобы в новый массив вошли только четные двухзначные числа из исходного.

// const arr = [12, 34, 56, 78, 89, 91, 102, 115];
// const filteredArr = arr.filter(num => num >= 10 && num <= 99 && num % 2 === 0);
// console.log(filteredArr); // [12, 34, 56, 78]


// todo: Пользователь вводит 10 случайных значений. Каждое значение необходимо записать в массив. С помощью метода .every() проверить были ли все введенные пользователем данные – числами.

// const arr = [];

// for (let i = 0; i < 10; i++) {
//   const value = prompt(`Введите значение ${i+1}:`);
//   arr.push(value);
// }

// const allNumbers = arr.every((item) => !isNaN(item) && Number(item) !== '');
// console.log(allNumbers);

// ! Сначала мы создаем пустой массив arr, затем запускаем цикл for, который просит пользователя ввести 10 значений и добавляет каждое значение в массив arr. Затем мы используем метод .every(), который проверяет каждый элемент массива на соответствие определенному условию. В данном случае мы проверяем, что каждый элемент является числом, используя функцию isNaN() и Number(). Если все элементы массива являются числами, то метод .every() вернет true, иначе - false. Наконец, мы выводим результат проверки в консоль с помощью console.log().

//todo: Дан массив объектов

// const arr = [
//     {a: 2, b: 1},
//     {a: 5, b: 12},
//     {a: 95, b: 7}
//   ]
//   Используя ТОЛЬКО методы массивов (циклы запрещены):
  
//   Вывести в консоль 'its valid', если во всех объектах поле a > b, вывести 'its invalid' если хотя бы в одном объекте a<=b
//   На основе массива arr, создать массив объектов у которых поле b возведено в квадрат пример:
//   const arr2 = [
//     {a: 2, b: 1},
//     {a: 5, b: 144},
//     {a: 95, b: 49}
//   ];
// ?? ===================================================================================================================

// Решение первой задачи.

// const arr = [
//     {a: 2, b: 1},
//     {a: 5, b: 12},
//     {a: 95, b: 7}
//   ];
  
  // проверяем условие для каждого объекта в массиве
//   const isValid = arr.every(obj => obj.a > obj.b);
  
  // выводим результат в консоль
//   if (isValid) {
//     console.log('its valid');
//   } else {
//     console.log('its invalid');
//   }
  

// Решение второй задачи.

// const arr = [
//     {a: 2, b: 1},
//     {a: 5, b: 12},
//     {a: 95, b: 7}
//   ];
  
  // создаем новый массив с помощью метода map и передаем в него функцию, которая изменяет поле b объекта
//   const arr2 = arr.map(obj => {
//     return {
//       a: obj.a,
//       b: obj.b ** 2 // возводим b в квадрат
//     };
//   });
  
  // выводим результат в консоль
//   console.log(arr2);

// ! Решение первой задачи: Для проверки условия "a > b" в каждом объекте массива arr мы можем использовать метод массивов every(). Этот метод проверяет, удовлетворяет ли каждый элемент массива условию, заданному в колбэк-функции, и возвращает булевое значение.В нашем случае, колбэк-функция должна проверять, является ли поле "a" больше, чем поле "b" для каждого объекта в массиве. Если все объекты в массиве удовлетворяют этому условию, мы выводим "its valid", в противном случае - "its invalid".

// ! Решение второй задачи: Для создания нового массива объектов, у которых поле "b" возведено в квадрат, мы можем использовать метод массивов map(). Этот метод применяет заданную колбэк-функцию ко всем элементам массива и возвращает новый массив, состоящий из результатов выполнения функции.В нашем случае, колбэк-функция должна возводить значение поля "b" в квадрат и создавать новый объект с полем "a" из исходного объекта и полем "b" со значением "b^2". В итоге, мы получим новый массив объектов arr2, где поле "b" в каждом объекте возведено в квадрат.